library(caret) library(dslabs) set.seed(1) data("mnist_27")
models <- c("glm", "lda", "naive_bayes", "svmLinear",                 "gamboost", "gamLoess", "qda",                 "knn", "kknn", "loclda", "gam",                 "rf", "ranger", "wsrf", "Rborist",                 "avNNet", "mlp", "monmlp",                 "adaboost", "gbm",                 "svmRadial", "svmRadialCost", "svmRadialSigma")
fits <- lapply(models, function(model) {     print(model)     train(y ~ ., method = model, data = mnist_27$train) })
install.packages("mboost")
fits <- lapply(models, function(model) {     print(model)     train(y ~ ., method = model, data = mnist_27$train) })
library(mboost)
install.packages("libcoin")
library(mboost)
fits <- lapply(models, function(model) {     print(model)     train(y ~ ., method = model, data = mnist_27$train) })
library(caret) library(dslabs) library(mboost) set.seed(1) data("mnist_27")
models <- c("glm", "lda", "naive_bayes", "svmLinear",                 "gamboost", "gamLoess", "qda",                 "knn", "kknn", "loclda", "gam",                 "rf", "ranger", "wsrf", "Rborist",                 "avNNet", "mlp", "monmlp",                 "adaboost", "gbm",                 "svmRadial", "svmRadialCost", "svmRadialSigma")
fits <- lapply(models, function(model) {     print(model)     train(y ~ ., method = model, data = mnist_27$train) })
warnings()
names(fits) <- models
fits_predicts <- sapply(fits, function(fits) {     predict(fits, mnist_27$test) })
dim(fit_predicts)
dim(fits_predicts)
confusionMatrix(fits)
fits$glm$results$Accuracy
fits %>% mean(.$Accuracy) <- models
max(fits[[c]]$results["Accuracy"])
confusionvector <- sapply(c, function(c) {     confusionMatrix(factor(pred[, c]), y_test)$overall["Accuracy"] })
confusionvector <- sapply(c, function(c) {     confusionMatrix(factor(fits_predicts[, c]), y_test)$overall["Accuracy"] })
confusionvector <- sapply(c, function(c) {     confusionMatrix(factor(fits_predicts[, c]), mnist_27$test$y)$overall["Accuracy"] })
mnist_27$test$y
fit_predicts
fits_predicts
class(mnist_27$test$y)
as.cconfusionvector <- sapply(c, function(c) {     confusionMatrix(factor(fits_predicts[, c]), as.character(mnist_27$test$y))$overall["Accuracy"] })
confusionvector <- sapply(c, function(c) {     max(fits[[c]]$results["Accuracy"])     #confusionMatrix(factor(fits_predicts[, c]), mnist_27$test$y)$overall["Accuracy"] })
confusionvector <- sapply(c, function(c) {     max(fits_predicts[[c]]$results["Accuracy"])     #confusionMatrix(factor(fits_predicts[, c]), mnist_27$test$y)$overall["Accuracy"] })
class(fits_predicts)
confusionMatrix(factor(pred[, 1]), mnist_27$test$y)$overall["Accuracy"]
confusionMatrix(factor(fits_predicts[, 1]), mnist_27$test$y)$overall["Accuracy"]
confusionvector <- sapply(c, function(c) {     #max(fits[[c]]$results["Accuracy"])     confusionMatrix(factor(fits_predicts[, c]), mnist_27$test$y)$overall["Accuracy"] })
confusionvector <- sapply(c, function(c) {     #max(fits[[c]]$results["Accuracy"])     confusionMatrix(factor(fits_predicts[, 1]), mnist_27$test$y)$overall["Accuracy"] })
confusionvector
class(factor(fits_predicts[, c]))
class(factor(fits_predicts[, 1]))
class(mnist_27$test$y)
levels(factor(fits_predicts[, 1]))
levels(mnist_27$test$y)
confusionvector <- sapply(models, function(c) {     #max(fits[[c]]$results["Accuracy"])     confusionMatrix(factor(fits_predicts[, c]), mnist_27$test$y)$overall["Accuracy"] })
confusionvector
mean(confusionvector)
class(fits_predicts)
dim(fits_predicts)
df <- data.frame(matrix(unlist(fits_predicts), nrow = 23, byrow = T)) colnames(df) <- seq(1:200) rownames(df) <- models col_index <- seq(1, ncol(df), 1) predict_vote <- map(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2)     return(vote) }) predict_vote <- as.factor(predict_vote$vote) #  as factor confusionMatrix(predict_vote, mnist_27$test$y)
df <- data.frame(matrix(unlist(fits_predicts), nrow = 23, byrow = T)) colnames(df) <- seq(1:200) rownames(df) <- models col_index <- seq(1, ncol(df), 1) col_index <- seq(1, ncol(df), 1) predict_vote <- map_df(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2)     return(data_frame(vote = vote)) }) # returns a df predict_vote <- as.factor(predict_vote$vote) #  as factor confusionMatrix(predict_vote, mnist_27$test$y)
library(purrr)
df <- data.frame(matrix(unlist(fits_predicts), nrow = 23, byrow = T)) colnames(df) <- seq(1:200) rownames(df) <- models col_index <- seq(1, ncol(df), 1) predict_vote <- map_df(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2)     return(data_frame(vote = vote)) }) # returns a df
predict_vote <- map_df(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2)     return(df(vote = vote)) }) # returns a df
predict_vote <- map_df(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2) }) 
predict_vote <- map_df(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2)     vote }) # returns a df
predict_vote <- map_df(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2)     return(df(vote)) }) # returns a df
predict_vote <- map(col_index, function(j) {     vote <- ifelse(test = sum(df[, j] == 7) > 12, yes = 7, no = 2)     return(vote) })
predict_vote <- as.factor(predict_vote$vote) #  as factor
confusionMatrix(predict_vote, mnist_27$test$y)
predict_vote
vote <- ifelse(test = sum(df[, 1] == 7) > 12, yes = 7, no = 2)
vote
class(vote)
predict_vote <- map(col_index, function(j) {     vote <- ifelse(test = sum(df[, 1] == 7) > 12, yes = 7, no = 2)     as.dataframe(vote) })
predict_vote <- map(col_index, function(j) {     vote <- ifelse(test = sum(df[, 1] == 7) > 12, yes = 7, no = 2)     as.data.frame(vote) })
predict_vote <- as.factor(predict_vote$vote) #  as factor
confusionMatrix(predict_vote, mnist_27$test$y)
predict_vote <- map(col_index, function(j) {     vote <- ifelse(sum(df[, j] == 7) > 12, yes = 7, no = 2)     as.data.frame(vote) })
sum(df[,1])
class(df)
sum(as.numeric(df[,1]))
predict_vote <- map(col_index, function(j) {     vote <- ifelse(sum(as.numeric(df[, j]) == 7) > 12, yes = 7, no = 2)     as.data.frame(vote) })
ifelse(sum(as.numeric(df[, 3]) == 7) > 12, yes = 7, no = 2)
sum(as.numeric(df[, 3]))
sum(as.numeric(df[, 3]==7))
sum(as.numeric(df[, 3]==2))
ifelse(predict_vote <- map(col_index, function(j) {     vote <- ifelse((sum(as.numeric(df[, j])) == 7) > 12, yes = 7, no = 2)     as.data.frame(vote) })sum(as.numeric(df[, 3]) == 7) > 12, yes = 7, no = 2)
(sum(as.numeric(df[, 3])))
as.numeric(df[, 3]) == 7
sum(as.numeric(df[, 3]) == 7)
df[,3]
as.numeric(df[, 3]) == 7
df[, 3] == 7
predict_vote <- map(col_index, function(j) {     vote <- ifelse(sum(df[, j] == 7) > 12, yes = 7, no = 2)     as.data.frame(vote) })
sum(df[, 3] == 7)
class(sum(df[, j] == 7))
class(sum(df[, 3] == 7))
predict_vote <- map(col_index, function(j) {     vote <- ifelse(sum(df[, j] == 7) > 12, 7, 2)     as.data.frame(vote) })
df[,3]==7
df[,4]==7
df[,5]==7
df[,6]==7
sum(df[,5]==7)
rm(vote, envir = as.environment(".GlobalEnv"))
predict_vote <- map(col_index, function(j) {     vote <- ifelse(sum(df[, j] == 7) > 12, 7, 2)     as.data.frame(vote) })
class(predict_vote)
prpredict_vote <- map(col_index, function(j) {     vote <- ifelse(sum(df[, j] == 7) > 12, 7, 2)     return(vote) })
df$models
df$200
df$199
df$1
df[1]
df[1,]
df[,1]
predict_vote <- map_df(col_index, function(j) {     vote <- ifelse(sum(df[, j] == 7) > 12, 7, 2)     return(vote) })
predict_vote <- map_df(col_index, function(.) {     vote <- ifelse(sum(df[, .] == 7) > 12, 7, 2)     return(vote) })
predict_vote <- map(col_index, function(.) {     vote <- ifelse(sum(df[, .] == 7) > 12, 7, 2)     return(vote) })
rm(prpredict_vote, envir = as.environment(".GlobalEnv"))
predict_vote <- map(col_index, function(j) {     vote <- ifelse(sum(df[, j] == 7) > 12, 7, 2)     return(vote) })
predict_vote <- sapply(col_index, function(j) {     ifelse(sum(df[, j] == 7) > 12, 7, 2)     #return(vote) })
class(predict_vote)
predict_vote <- as.factor(predict_vote$vote) #  as factor
confusionMatrix(predict_vote, mnist_27$test$y)
str(predict_vote)
predict_vote <- as.factor(predict_vote) #  as factor
confusionMatrix(predict_vote, mnist_27$test$y)
confusionMatrix(predict_vote, mnist_27$test$y)$overall["Accuracy"]
ensemble_accuracy <- confusionMatrix(predict_vote, mnist_27$test$y)$overall["Accuracy"]
which(confusionvector > ensemble_accuracy)
which(max(confusionvector))
max(confusionvector)
confusionvector[6,10,11,21,22]
confusionvector[c(6,10,11,21,22)]
mean(which(confusionvector > ensemble_accuracy))
confusion_vector[which(confusionvector > ensemble_accuracy)]
confusionvector[which(confusionvector > ensemble_accuracy)]
mean(confusionvector[which(confusionvector > ensemble_accuracy)])
mean(confusionvector[which(confusionvector > 0.8)])
index_of_high <- which(confusionvector > 0.8)
new_pred <- predict_vote[index_of_high]
new_y <- mnist_27$test$y[index_of_high]
confusionMatrix(new_pred, new_y)$overall["Accuracy"]
model$results["Accuracy"]
fits_predicts$results["Accuracy"]
min(confusionvector)
predict_vote <- as.factor(predict_vote) #  as factor ensemble_accuracy <- confusionMatrix(predict_vote, mnist_27$test$y)$overall["Accuracy"] mean(confusionvector[which(confusionvector > ensemble_accuracy)])
which(confusionvector > ensemble_accuracy)
index_of_high <- which(confusionvector > ensemble_accuracy)
index_of_high
new_train <- fits[index_of_high]
new_fits <- fits[index_of_high]
new_fits$gam$results$Accuracy
new_fits$gamLoess$results$Accuracy
new_fits$loclda$results$Accuracy
new_fits$svmRadial$results$Accuracy
new_fits$svmRadialCost$results$Accuracy
index_of_high <- which(confusionvector > 0.8)
new_fits <- fits[index_of_high]
new_accuracy <- map(models(index_of_high), function(.) {     fits$.$results$Accuracy })
new_accuracy <- map(models[index_of_high], function(.) {     fits$.$results$Accuracy })
class(new_accuracy)
str(new_accuracy)
models[index_of_high]
new_accuracy <- fits$(models[index_of_high])$results$Accuracy
new_accuracy <- fits[index_of_high]$results$Accuracy
new_accuracy <- confusionMatrix(predict_vote, mnist_27$test$y)$overall["Accuracy"]
new_accuracy
str(new_fits)
summary(new_fits)
summary(new_fits)["Accuracy"]
new_fits["Accuracy"]
coef(new_fits)
index_of_high <- which(confusionvector > 0.8) new_fits <- fits[index_of_high] new_models <- models[index_of_high] new_predict_vote <- sapply(ndex_of_high, function(j) {     ifelse(sum(df[, j] == 7) > 12, 7, 2) }) new_predict_vote <- as.factor(predict_vote) #  as factor confusionMatrix(new_predict_vote, mnist_27$test$y)$overall["Accuracy"]
index_of_high <- which(confusionvector > 0.8) new_fits <- fits[index_of_high] new_models <- models[index_of_high] new_predict_vote <- sapply(index_of_high, function(j) {     ifelse(sum(df[, j] == 7) > 12, 7, 2) }) new_predict_vote <- as.factor(predict_vote) #  as factor confusionMatrix(new_predict_vote, mnist_27$test$y)$overall["Accuracy"]
data("tissue_gene_expression")
dim(tissue_gene_expression$x)
tissue_gene_expression$x
pc <- prcomp(tissue_gene_expression$x)
str(pc)
pc$x
pc$sdev
library(dslabs) data("movielens")
head(movielens)
movielens %>% summarize(n_users = n_distinct(userid),                         n_movies = n_distinc(movieId))
library(dplyr)
movielens %>% summarize(n_users = n_distinct(userid),                         n_movies = n_distinc(movieId))
movielens %>% summarize(n_users = n_distinct(userId),                         n_movies = n_distinc(movieId))
movielens %>% summarize(n_users = n_distinct(userId),                         n_movies = n_distinct(movieId))
str(movielens)
movielens %>% summarize(n_users = n_distinct(userId),                         n_movies = n_distinct(movieId))
movielens %>% group_by(year) %>%     ggplot(aes(year, ratings)) ++ geom_line()
library(ggplot2)
movielens %>% group_by(year) %>%     ggplot(aes(year, ratings)) ++ geom_line()
movielens %>% group_by(year) %>%     ggplot(aes(year, ratings)) + geom_line()
movielens %>% group_by(year) %>%     ggplot(aes(year, rating)) + geom_line()
movielens %>% group_by(year) %>%     ggplot(aes(year, count(rating))) + geom_line()
movielens %>% group_by(ratings) %>%     ggplot(aes(year, count(rating))) + geom_line()
movielens %>% group_by(rating) %>%     ggplot(aes(year, count(rating))) + geom_line()
movielens %>% group_by(count(rating)) %>%     ggplot(aes(year, count(rating))) + geom_line()
movielens %>% group_by(year) %>%     ggplot(aes(year, count(rating))) + geom_line()
count(movielens$rating)
mean(movielens$rating)
movielens %>% group_by(year) %>%     ggplot(aes(year, n())) + geom_line()
movielens %>% group_by(year) %>%     ggplot(aes(year)) + geom_line()
movielens %>% group_by(year) %>%     hist()
p <- movielens %>% count(year) plot(p)
p[which(p$n==max(p$n)),]
movielens %>% group_by(movieId, year) %>%     summarize(n = n()) %>%     ggplot(aes(x = year, y = sqrt(n), group = year)) +     geom_boxplot()
q2 <- movielens %>% filter(title = "Shawshank Redemption")
q2 <- movielens %>% filter(title == "Shawshank Redemption")
head(movielens$title)
head(movielens$title, 50)
q2 <- movielens %>% filter(title == "Shawshank")
q2 <- movielens %>% filter(title == "The Shawshank Redemption")
q2 <- movielens %>% filter(year == 1994)
head(q2$title, 100)
q2 <- movielens %>% filter(title = "Shawshank Redemption, The")
q2 <- movielens %>% filter(title == "Shawshank Redemption, The")
mean(q2$ratings)
mean(q2$rating)
sr <- movielens %>% filter(title == "Shawshank Redemption, The") mean(sr$rating)
fg <- movielens %>% filter(title == "Forrest Gump")
fg <- movielens %>% filter(title == "Forrest Gump") %>% group_by(year)
fg <- movielens %>% filter(title == "Forrest Gump")
mean(fg$rating)
data("movielens")
fg <- movielens %>% filter(title == "Forrest Gump") %>% group_by(year)
fg <- movielens %>% filter(title == "Forrest Gump")
fg <- movielens %>% filter(movieId == 356)
movielens <- mutate(movielens, date = as.date(timestamp))
movielens <- mutate(movielens, date = as_datetime(timestamp))
library(lubricate)
install.packages("lubricate")
library(lubridate)
movielens <- mutate(movielens, date = as_datetime(timestamp))
fg <- movielens %>% filter(movieId == 356) %>% group_by(date)
fg <- movielens %>% filter(movieId == 356) %>% group_by(date) %>%     summarize(n = n()) %>%     ggplot(aes(x = year, y = sqrt(n), group = year)) +     geom_boxplot()
fg
movielens %>% filter(movieId == 356)      summarize(n = n())
movielens %>% filter(movieId == 356)      summarize(n = n()) %>%     ggplot(aes(x = year, y = sqrt(n), group = year)) +     geom_boxplot()
movielens %>% filter(movieId == 356) %>% group_by(date) %>%     summarize(n = n()) %>%     ggplot(aes(x = year, y = sqrt(n), group = year)) +     geom_boxplot()
movielens %>% filter(movieId == 356) %>% group_by(date) %>%     summarize(n = n()) %>%     ggplot(aes(x = date, y = sqrt(n), group = date)) +     geom_boxplot()
movielens %>% filter(movieId == 356) %>% group_by(date) %>%     summarize(n = n()) 
movielens %>%     filter(year >= 1993) %>%     group_by(movieId) %>%     summarize(n = n(), years = 2017 - first(year),                 title = title[1],                 rating = mean(rating)) %>%                 mutate(rate = n / years) %>%                 ggplot(aes(rate, rating)) +                 geom_point() +                 geom_smooth()
set.seed(1986) n <- round(2 ^ rnorm(1000, 8, 1))
set.seed(1) mu <- round(80 + 2 * rt(1000, 5)) range(mu) schools <- data.frame(id = paste("PS", 1:100),                       size = n,                       quality = mu,                       rank = rank(-mu))
schools %>% top_n(10, quality) %>% arrange(desc(quality))
set.seed(1) scores <- sapply(1:nrow(schools), function(i) {     scores <- rnorm(schools$size[i], schools$quality[i], 30)     scores }) schools <- schools %>% mutate(score = sapply(scores, mean))
schools %>% top_n(10, quality) %>% arrange(desc(quality))
set.seed(1) scores <- sapply(1:nrow(schools), function(i) {     scores <- rnorm(schools$size[i], schools$quality[i], 30)     scores }) schools <- schools %>% mutate(score = sapply(scores, mean))
scores
schools %>% sort(decreasing = TRUE) %>% head(10)
schools %>% sort(scores, decreasing = TRUE) %>% head(10)
schools %>% sort(scores, decreasing = TRUE)
dim(scores)
class(scores)
nrow(scores)
desc(schools)
schools %>% arrange(desc(scores)) %>% head()
sorted <- schools %>% arrange(desc(scores))
sorted <- schools %>% arrange(desc(as.vector(scores)))
class(schools$scores)
class(schools$score)
sorted <- schools %>% arrange(desc(score))
sorted <- schools %>% arrange(desc(score)) %>% head()
head(sorted)
head(sorted, 10)
sorted[1:10,]
sorted <- schools %>% arrange(desc(score))
sorted[1:10,]
median(schools$size)
median(sorted[1:10,]$size)
median(sorted[-1:10,]$size)
median(sorted[-10,]$size)
sorted[-10,]
median(sorted[991:1000,]$size)
sorted[991:1000,]
hist(log(schools$size), scores)
hist(schools, log(size), scores)
class(schools$score)
class(schools$scores)
hist(schools, log(size), score)
class(schools$size)
sorted %>% ggplot(aes(log(size), score))
sorted %>% ggplot(aes(log(size), score)) + geom_histogram()
sorted %>% ggplot(aes(size, score)) + geom_histogram()
sorted %>% ggplot(score) + geom_histogram()
sorted %>% ggplot(aes(log(size), score)) + geom_histogram()
log(sorted$size)
sorted$score
sorted %>% ggplot(aes(log(size), score)) + geom_histogram()
sorted %>% ggplot(aes(log(size), score)) 
sorted %>% ggplot(aes(log(size), score)) + geom_line()
sorted %>% ggplot(aes(log(size), score)) + geom_histogram(binwidth = 1)
sorted %>% ggplot(aes(x=log(size), y=score)) + geom_histogram(binwidth = 1)
sorted %>% ggplot(aes(x=log(size))) + geom_histogram(binwidth = 1)
sorted %>% ggplot(aes(x=log(size))) + geom_histogram(aes(y = ..score..),binwidth = 1)
sorted %>% ggplot(aes(x=log(size))) + geom_histogram(aes(y = score),binwidth = 1)
sorted %>% ggplot(aes(x=log(size))) + geom_histogram(aes(y = ..score..),binwidth = 1)
qplot(sorted$size, geom = "histogram")
qplot(sorted$size, y=score, geom = "histogram")
qplot(sorted, x=size, y=score, geom = "histogram")
plot(sorted$size, sorted$score)
plot(x=log(sorted$size), sorted$score)
sorted %>% ggplot(aes(x = log(size), y = score)) + geom_boxplot()
sorted %>% ggplot(aes(x = log(size), y = score)) + geom_line()
schools %>% ggplot(aes(size, score)) +     geom_point(alpha = 0.5) +     geom_point(data = filter(schools, rank <= 10), col = 2)
overall <- mean(sapply(scores, mean))
